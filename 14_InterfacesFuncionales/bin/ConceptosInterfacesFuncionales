

INTERFACES FUNCIONALES 

INTERFACES
▸ Contrato que compromete a la clase que lo implementa a implementar una serie de métodos.
▸ Se pueden utilizar las interfaces como referencias a la hora de crear objetos de una clase que implemente la interfaz.

	List<String> lista = new ArrayList<>(); 

▸ Desde Java SE 8, pueden incluir metodos que no sean solamente abstract sino tambien metodos con implementacion.
Estos son de 2 tipos, metodos static y default.


INTERFACES

public interface Interfaz {//Interfaz que tiene un metodo abstract, que estamos obligados a darle cuerpo si implementamos esta interfaz

//Abstracto:
 public void metodo();//Interfaz que tiene un metodo abstract, que estamos obligados a darle cuerpo si implementamos esta interfaz
 
//Por defecto: 
 default public void metodoPorDefecto() {//Metodo que tiene implementacion. La clase que implemente esta interfaz no tiene obligacion de sobreescribir aunque si lo sobreescribe tendra su implementacion propia
 System.out.println("Este es uno de los nuevos
 métodos por defecto");
 }

//Estático:
 public static void metodoEstatico() {//Como todos los metodos static, se puede llamar directamente con el nombreDeLaInterfaz.MetodoStatic a ese metodo
 System.out.println("Método estático en
 un interfaz");
 }
}

INTERFAZ FUNCIONAL
*▸ Interfaz que solo tiene un método abstracto.
▸ Puede tener uno o varios métodos por defecto y/o estáticos. 
*Pueden tener varios metodos abstrat en tanto en cuanto todos menos uno sobreescriban un metodo publico de la clase Object
*▸ Puede tener varios métodos abstractos, siempre que todos menos uno sobrescriban un método público de la clase Object.
▸ Usualmente este tipo de interfaces, los implementamos con una clase anónima. Es decir una clase con un metodo sort() que reciba una instancia, por ejemplo de Comparator, se daria una clase anonima instanciada y definida ahi mismo
▸ Muchos interfaces conocidos son funcionales.

INTERFAZ FUNCIONAL
▸ Java SE 8 también incorpora la anotación
@FunctionalInterface que comprueba en
tiempo de compilación si se cumplen con
las condiciones anteriores. 
Es decir podemos tener interfaces funcionales que no tengan esta anotacion, y no dejaran de serlo
pero la anotacion nos ayudara a comprobar que una interfaz tiene solamente un metodo abstracto propio nuestro que nos .... publico de la clase Objetc.

INTERFACES FUNCIONALES Y EXPRESIONES LAMBDA
▸ Altamente relacionados
▸ De alguna forma, allí donde se espera una
instancia de una clase que implemente una
interfaz funcional,por ejemplo Comparator, podremos usar una
expresión lambda. como tenemos en el ejemplo de la clase Collection que tiene el metodo sort() que puede recivbir una coleccion y ademas un Comparator,
pues podriamos dar ese Comparator mediante una expresion Lambda:

	Collections.sort(lista, (str1, str2)-> str1.length()-str2.length()); 
	

