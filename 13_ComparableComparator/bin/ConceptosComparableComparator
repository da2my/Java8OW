INTERFACES
COMPARABLE Y
COMPARATOR

OPERACIONES CON OBJETOS
▸ Muchas operaciones entre objetos nos
obligan a compararlos: buscar (nos va a pedir el que podamos saber que un determinado objeto es comparable con otro), ordenar (nos
pide explicitamente), …
▸ Los tipos primitivos y algunas clases envoltorio ya
implementan su orden (por ejemplo Integer tienen orden natural, la clase String por ejemplo tiene el orden
lexicográfico).
▸ Para nuestras clases (modelo) tenemos que
especificar un orden especifico con el que las vamos a
tratar.

1.
COMPARABLE 

COMPARABLE
▸ Se trata de un interfaz sencillo, es una interfaz funcional con un solo metodo abstracto

Tiene un metodo compareTo() que recibe un objeto del mismo tipo que la clase que implementa esta interfaz,
el tipo de retorno es entero...

public interface Compararable<T> {
 public int compareTo(T o);
} 

▸ Recibe un objeto del mismo tipo.
▸ Devuelve 0 si los dos objetos son iguales, devuelve un valor
negativo si el valor de la clase que implementa la interfaz es menor que el valor de la clase que le estamos pasando, 
y uno positivo si es mayor.
▸ Comparable nos sirve para indicar el orden principal, normal
de una clase. Por ejemplo, podemos definir un orden de persona; la intuicion nos dice que una persona es menor que otra 
cuando tiene menos edad, y por esa razon lo podriamos hacer en base a la fecha de nacimiento o la edad 

2.
COMPARATOR 

COMPARATOR
▸ Se trata de un interfaz sencilla, funcional. Cuando nosotros tenemos una orden natural para los elementos, por ejemplo el orden
natural de los numeros, pero queremos proporcionar para una determinada operacion un orden especifico como por ejemplo
el orden inverso

//recibe dos objetos de un mismo tipo, el valor de retorno sigue las mismas normas que la interfaz Comparable. Y en definitiva esta
interfaz nos sirve para indicar un orden alternativo y puntual diferente al orden natural de la clase

public interface Comparator<T> {
 public int compare(T o1, T o2);
} 

▸ Recibe dos argumentos
▸ Devuelve 0 si son iguales, un valor
negativo si es menor, y uno positivo si es
mayor.
▸ Nos sirve para indicar un orden puntual,
diferente al orden principal de una clase.


